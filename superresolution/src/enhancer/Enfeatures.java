package enhancer;

import ij.process.ColorProcessor;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.DecimalFormat;
import java.util.Arrays;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
//Weka Packages Necessary for Connectivity
import javax.swing.table.DefaultTableModel;

import weka.core.*;
import weka.classifiers.*;
import weka.classifiers.bayes.*;
import weka.filters.Filter;
import weka.filters.supervised.attribute.Discretize;

public class Enfeatures extends javax.swing.JFrame {

    JFileChooser fc;
    String dcode, dpath, directory, filename;
    File[] listOfFiles;
    File file;
    double f, f1, f2, f3,f4,f5,f6,f7,f8,f9,f10,f11,f12;
   //String f3;
    DefaultTableModel model;

    public Enfeatures() {
        initComponents();
        this.setSize(1200, 620);
        this.setTitle("IMAGE ENHANCER");
        Dimension sd = Toolkit.getDefaultToolkit().getScreenSize();
        setLocation(sd.width / 2 - this.getWidth() / 2, sd.height / 2 - this.getHeight() / 2);
        model = new DefaultTableModel();
        model.addColumn("Name");
        //model.addColumn("Angular 2nd moment");
        model.addColumn("Contrast");
        model.addColumn("Correlation");
        model.addColumn("variance");
        //model.addColumn("Inverse Difference Moment, ");
        /*model.addColumn("Sum Average");
        model.addColumn("Sum Variance");

        model.addColumn("Sum Entropy");*/

        model.addColumn("Entropy");

        /*model.addColumn("Difference Variance");

        model.addColumn("Difference Entropy");

        model.addColumn("Information Measures of Correlation1");
        model.addColumn("Information Measures of Correlation2");
        model.addColumn("Maximum Correlation COefficient");*/
        table.setModel(model);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel6 = new javax.swing.JLabel();
        jLayeredPane2 = new javax.swing.JLayeredPane();
        jLabel10 = new javax.swing.JLabel();
        tpath = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        bfile = new javax.swing.JButton();
        jLayeredPane3 = new javax.swing.JLayeredPane();
        bstart = new javax.swing.JButton();
        Back = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        jLabel6.setFont(new java.awt.Font("Bookman Old Style", 2, 36)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 0, 51));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("FEATURE EXTRACTION USING GLCM");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(30, 20, 1120, 40);

        jLayeredPane2.setBackground(new java.awt.Color(255, 0, 0));
        jLayeredPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel10.setFont(new java.awt.Font("Bookman Old Style", 1, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(204, 0, 0));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel10.setText("Folder Name :-");
        jLayeredPane2.add(jLabel10);
        jLabel10.setBounds(20, 20, 180, 30);

        tpath.setFont(new java.awt.Font("Bookman Old Style", 1, 12)); // NOI18N
        jLayeredPane2.add(tpath);
        tpath.setBounds(210, 20, 260, 30);

        table.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        table.setGridColor(new java.awt.Color(255, 0, 255));
        jScrollPane1.setViewportView(table);

        jLayeredPane2.add(jScrollPane1);
        jScrollPane1.setBounds(20, 70, 1090, 290);

        bfile.setFont(new java.awt.Font("Courier New", 3, 18)); // NOI18N
        bfile.setText("Get Image Folder For Feature Extraction");
        bfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bfileActionPerformed(evt);
            }
        });
        jLayeredPane2.add(bfile);
        bfile.setBounds(480, 20, 510, 29);

        getContentPane().add(jLayeredPane2);
        jLayeredPane2.setBounds(10, 70, 1140, 380);

        jLayeredPane3.setBackground(new java.awt.Color(255, 0, 0));
        jLayeredPane3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        bstart.setFont(new java.awt.Font("Courier New", 1, 14)); // NOI18N
        bstart.setText("START FEATURE EXTRACTION");
        bstart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bstartActionPerformed(evt);
            }
        });
        jLayeredPane3.add(bstart);
        bstart.setBounds(430, 20, 270, 30);

        Back.setText("Back");
        Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackActionPerformed(evt);
            }
        });
        jLayeredPane3.add(Back);
        Back.setBounds(20, 20, 70, 23);

        getContentPane().add(jLayeredPane3);
        jLayeredPane3.setBounds(10, 470, 1140, 70);

        jLabel1.setBackground(new java.awt.Color(153, 255, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/photo.jpg"))); // NOI18N
        jLabel1.setText("jLabel1");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 1180, 580);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bstartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bstartActionPerformed

        try{
            File file = new File("C:/Users/Masoom/Desktop/pratham/files/features.arff");
            String Instance = "";

                // if file doesnt exists, then create it
            if (!file.exists()) {
                file.createNewFile();
            }
            
            FileWriter fw;
            fw = new FileWriter(file.getAbsoluteFile());
            BufferedWriter bw = new BufferedWriter(fw);
            
            bw.write("@relation Preprocess_Analysis");
            bw.newLine();
            bw.newLine();
            
            //bw.write("@ATTRIBUTE name STRING");
            //bw.newLine();
            //bw.write("@ATTRIBUTE energy REAL");
            //bw.newLine();
            bw.write("@ATTRIBUTE contrast REAL");
            bw.newLine();
            bw.write("@ATTRIBUTE correlation REAL");
            bw.newLine(); 
            bw.write("@ATTRIBUTE variance REAL");
            bw.newLine();
            //bw.write("@ATTRIBUTE homogeneity REAL");
            //bw.newLine();
            bw.write("@ATTRIBUTE entropy REAL");
            bw.newLine();
            //bw.write("@ATTRIBUTE class {Positive, Negative}");
            //bw.newLine();
            bw.newLine();

            bw.write("@DATA");
            bw.newLine(); 

            Englcm gl = new Englcm();

            for (File file1 : listOfFiles) {
                if (file1.isFile()) {

                    try {
                        //System.out.println(file1.getName());
                        //proxy.eval("rgbImage = imread('" + tpath.getText() + "\\" + file1.getName() + "');");

                        BufferedImage image;
                        File input = new File(tpath.getText() + "\\" + file1.getName());
                        image = ImageIO.read(input);                        
                    
                        ColorProcessor img = new ColorProcessor(image);

                        gl.run(img);
                        //System.out.println("" + gl.features[2]);
                        System.out.println("" + file1.getName());
                        //System.out.println("" + gl.getDescription());
                        
                        //Instance = Instance + file1.getName()+ ",";

                        //f=gl.features[0];
                        DecimalFormat df = new DecimalFormat("###0.0000");
                        //Instance = Instance + df.format(f) + ",";
                        
                        f1=gl.features[1];                        
                        Instance = Instance + df.format(f1) + ",";                        
                       
                        f2=gl.features[2];
                        DecimalFormat df2 = new DecimalFormat("##.0000");
                        Instance = Instance + df2.format(f2) + ",";
                        
                        f3=gl.features[3];
                        DecimalFormat df3 = new DecimalFormat("##.0000");
                        Instance = Instance + df3.format(f3) + ",";
                        
                       // f4=gl.features[4];
                        //Instance = Instance + df.format(f4) + ",";
                        
                        /*f5=gl.features[5];
                        Instance = Instance + df.format(f5) + ",";
                        
                        f6=gl.features[6];
                        Instance = Instance + df.format(f6) + ",";
                        
                        f7=gl.features[7];
                        Instance = Instance + df.format(f7) + ",";*/
                        
                        f8=gl.features[8];
                        Instance = Instance + df.format(f8) + ",";
                        
                        /*f9=gl.features[9];
                        Instance = Instance + df.format(f9) + ",";
                        
                        f10=gl.features[10];
                        Instance = Instance + df.format(f10) + ",";
                        
                        f11=gl.features[11];
                        Instance = Instance + df.format(f11) + ",";
                        
                        f12=gl.features[12];
                        Instance = Instance + df.format(f12) + ",";*/
                        
                       // Instance = Instance + "Negative";
                        String[] request = {file1.getName(), /*df.format(f),*/ df.format(f1), df2.format(f2),df3.format(f3),/*df.format(f4),df.format(f5),df.format(f6),df.format(f7),*/df.format(f8)/*,df.format(f9),df.format(f10),df.format(f11),df.format(f12)*/};

                        model.addRow(request);
                        bw.write(Instance);
                        bw.newLine();
                        Instance = "";
                        
                        
                    } catch (IOException ex) {
                        Logger.getLogger(Enfeatures.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                }
            }
            bw.close();
           
        }catch (IOException ex) {
            Logger.getLogger(Enfeatures.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_bstartActionPerformed

    private void bfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bfileActionPerformed
        // TODO add your handling code here:
        fc = new JFileChooser();
        int returnVal = fc.showOpenDialog(Enfeatures.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = fc.getCurrentDirectory();
            tpath.setText(file.getPath());

            File folder = new File(tpath.getText());
            listOfFiles = folder.listFiles();

            for (File file1 : listOfFiles) {
                if (file1.isFile()) {
                    //System.out.println(file1.getName());
                }
            }

        }

    }//GEN-LAST:event_bfileActionPerformed

    private void BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
    }//GEN-LAST:event_BackActionPerformed

/**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                Enfeatures obj = new Enfeatures();
                obj.setVisible(true);
              }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Back;
    private javax.swing.JButton bfile;
    private javax.swing.JButton bstart;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLayeredPane jLayeredPane2;
    private javax.swing.JLayeredPane jLayeredPane3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    private javax.swing.JTextField tpath;
    // End of variables declaration//GEN-END:variables
}
