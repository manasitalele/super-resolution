package enhancer;

import ij.process.ColorProcessor;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.List;
import java.util.Scanner;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

import weka.core.*;
import weka.classifiers.*;

import weka.classifiers.functions.GaussianProcesses;

import weka.filters.Filter;
import weka.filters.supervised.attribute.Discretize;
import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.Imgproc;
import weka.classifiers.functions.LinearRegression;
import weka.estimators.UnivariateIntervalEstimator;

public class Enregression extends javax.swing.JFrame {

    JFileChooser fc;
    String dcode, dpath, directory, filename;
    File[] listOfFiles;
    File file;
    String c, va, e, co, ho, en, sd;

    Instances TrainWithDis, Train, Test, TestWODis;

    GaussianProcesses Classify = new GaussianProcesses();
    
    
    

    Evaluation evaluate;
    String Correct, Incorrect;
    int kFoldNumber = 10;
    String corr, incorr;

    static int width;
    static int height;
    static double alpha = 2;
    static double beta = 50;
    
    double[][] getVal = new double[1][2];

    public Enregression() {
        initComponents();
        this.setSize(1200, 620);
        this.setTitle("IMAGE ENHANCER");
        Dimension sd = Toolkit.getDefaultToolkit().getScreenSize();
        setLocation(sd.width / 2 - this.getWidth() / 2, sd.height / 2 - this.getHeight() / 2);

        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel6 = new javax.swing.JLabel();
        jLayeredPane2 = new javax.swing.JLayeredPane();
        jLabel10 = new javax.swing.JLabel();
        tpath = new javax.swing.JTextField();
        bfile1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tdata = new javax.swing.JTextArea();
        jLayeredPane3 = new javax.swing.JLayeredPane();
        bmix = new javax.swing.JButton();
        back = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        jLabel6.setFont(new java.awt.Font("Bookman Old Style", 2, 36)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 0, 51));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("GAUSSIAN PROCESS");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(10, 20, 1140, 40);

        jLayeredPane2.setBackground(new java.awt.Color(255, 0, 0));
        jLayeredPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel10.setFont(new java.awt.Font("Bookman Old Style", 1, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(204, 0, 0));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel10.setText("File Name :-");
        jLayeredPane2.add(jLabel10);
        jLabel10.setBounds(10, 20, 180, 30);

        tpath.setFont(new java.awt.Font("Bookman Old Style", 1, 12)); // NOI18N
        jLayeredPane2.add(tpath);
        tpath.setBounds(200, 20, 260, 30);

        bfile1.setFont(new java.awt.Font("Courier New", 3, 18)); // NOI18N
        bfile1.setText("Give Test Image");
        bfile1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bfile1ActionPerformed(evt);
            }
        });
        jLayeredPane2.add(bfile1);
        bfile1.setBounds(470, 20, 450, 29);

        tdata.setBackground(new java.awt.Color(0, 0, 0));
        tdata.setColumns(20);
        tdata.setFont(new java.awt.Font("Bookman Old Style", 1, 14)); // NOI18N
        tdata.setForeground(new java.awt.Color(255, 0, 51));
        tdata.setRows(5);
        tdata.setBorder(null);
        jScrollPane1.setViewportView(tdata);

        jLayeredPane2.add(jScrollPane1);
        jScrollPane1.setBounds(80, 90, 970, 300);

        getContentPane().add(jLayeredPane2);
        jLayeredPane2.setBounds(10, 70, 1140, 410);

        jLayeredPane3.setBackground(new java.awt.Color(255, 0, 0));
        jLayeredPane3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        bmix.setFont(new java.awt.Font("Courier New", 1, 14)); // NOI18N
        bmix.setText("PERFORM PROCESS");
        bmix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bmixActionPerformed(evt);
            }
        });
        jLayeredPane3.add(bmix);
        bmix.setBounds(20, 20, 1030, 30);

        back.setText("Back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });
        jLayeredPane3.add(back);
        back.setBounds(1060, 20, 55, 30);

        getContentPane().add(jLayeredPane3);
        jLayeredPane3.setBounds(10, 490, 1140, 70);

        jLabel1.setBackground(new java.awt.Color(153, 255, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/photo.jpg"))); // NOI18N
        jLabel1.setText("jLabel1");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 1180, 580);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bfile1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bfile1ActionPerformed
        // TODO add your handling code here:
        fc = new JFileChooser();
        int returnVal = fc.showOpenDialog(Enregression.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = fc.getSelectedFile();

            tpath.setText(file.getPath());

        }
}//GEN-LAST:event_bfile1ActionPerformed

    private void bmixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bmixActionPerformed

        Englcm gl = new Englcm();

        File file = new File("C:/Users/Masoom/Desktop/pratham/files/Testfeatures.arff");
        if (file.exists()) {
            file.delete();
        }
        
        if (!file.exists()) {
            try {
                file.createNewFile();

                BufferedWriter out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), "UTF-8"));
                
                BufferedImage image;

                File input = new File(tpath.getText());
                //File input = new File("d:/Pics/stock2.jpg");
                image = ImageIO.read(input);

                ColorProcessor img = new ColorProcessor(image);
                
           

                gl.run(img);
                System.out.println(file.getName());
                //System.out.println("" + gl.getDescription());

                c = "" + gl.features[1];
                co = "" + gl.features[2];
                va = "" + gl.features[3];

                en = "" + gl.features[8];
                
                sd = "" + gl.getStdDev();
                double sd1=Double.parseDouble(sd);
                double div = 10000000000000.0;
                sd1 = sd1/div;
                

                out.write("@relation Preprocess_Analysis");
                out.newLine();
                out.newLine();
                //Attributes
                out.write("@ATTRIBUTE contrast NUMERIC");
                out.newLine();
                out.write("@ATTRIBUTE correlation NUMERIC");
                out.newLine();
                out.write("@ATTRIBUTE variance NUMERIC");
                out.newLine();
                out.write("@ATTRIBUTE entropy NUMERIC");
                out.newLine();
                out.write("@ATTRIBUTE stddev NUMERIC");
                out.newLine();
                out.newLine();
                out.write("@data");
                out.newLine();
                out.write(c + "," + co + "," + va + "," + en + "," + sd1);
                

                out.close();
                

            } catch (IOException ex) {
                Logger.getLogger(Enregression.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        try {
            Train = new Instances(new BufferedReader(new FileReader("C:/Users/Masoom/Desktop/pratham/files/subsetfeaturesLR.arff")));
            int index = Train.numAttributes()-1;
            Train.setClassIndex(index);

            Test = new Instances(new BufferedReader(new FileReader("C:/Users/Masoom/Desktop/f/Testfeatures.arff")));
            index = Test.numAttributes() - 1;
            Test.setClassIndex(index);

            System.out.println("welcome 1");

            evaluate = new Evaluation(Train);
            Classify.buildClassifier(Train); //the last instance with missing
            evaluate.evaluateModel(Classify, Test);
            //System.out.println(Classify);

            System.out.println(evaluate.predictions());
            
            System.out.println(evaluate.rootMeanSquaredError());
                        
            System.out.println(evaluate.toSummaryString());
            
            if (evaluate.rootMeanSquaredError() == 0.0) {
                JOptionPane.showMessageDialog(new Enregression(), "CORRECT IMAGE");
                //Mat source = Imgcodecs.imread(tpath.getText(), Imgcodecs.CV_LOAD_IMAGE_GRAYSCALE);
                Mat source = Imgcodecs.imread("C:/Users/Masoom/Desktop/test/LR001.jpg", Imgcodecs.CV_LOAD_IMAGE_GRAYSCALE);
                Mat destination = new Mat(source.rows(), source.cols(), source.type());

                Imgproc.equalizeHist(source, destination);
                Imgcodecs.imwrite("C:/Users/Masoom/Desktop/pratham/files/enhanced.jpg", destination);
            } else {
                JOptionPane.showMessageDialog(new Enregression(), "INCORRECT IMAGE");                
            }
            
            /*a = Test.firstInstance();
            int no = a.numValues();
            int no1 = a.numAttributes();
            System.out.println(a.attribute(1));
            
            System.out.println(a + " " + no + " " + no1);*/
            
         

        } catch (Exception e) {
            System.out.println(e.getMessage());
        }


}//GEN-LAST:event_bmixActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
    }//GEN-LAST:event_backActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                new Enregression().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton back;
    private javax.swing.JButton bfile1;
    private javax.swing.JButton bmix;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLayeredPane jLayeredPane2;
    private javax.swing.JLayeredPane jLayeredPane3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea tdata;
    private javax.swing.JTextField tpath;
    // End of variables declaration//GEN-END:variables

}
